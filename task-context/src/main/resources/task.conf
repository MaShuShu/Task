task-system {

  # 系统命名,主要用于创建多个系统实例时的命名空间的区分
  name = "demo"

  # 当前使用系统可支持的最高task协议版本
  version = "2.0"

  // task的queue实现
  //  queue-implementation = "cn.edaijia.task.queue.local.LocalQueue" # 仅用于本地测试
  queue-implementation = "cn.edaijia.task.queue.redis.RedisQueue"

  // 启动模式,如果是client模式,只可以提交任务,不会调度任务执行,server模式可提交任务,也可以调度任务执行
  boot-mode = "server"

  // 任务执行器
  executor = [
    {
      name: "default"
      # 系统默认的executor实现,基于akka的actor并发模型
      implementation: "cn.edaijia.task.executor.impl.actor.ActorTaskExecutor"
    },
    {
      name: "simple"
      # 最简单的executor实现
      implementation: "cn.edaijia.task.executor.impl.SimpleTaskExecutor"
    },
    {
      name: "jucExecutor"
      implementation: "cn.edaijia.task.executor.impl.JUCTaskExecutor"
    }
  ]

  # 固定任务的调用信息
  focused-task {

    # 固定频率调度的任务的队列,系统启动时初始化的task queue,该下面的任务会固定频率,即使队列中没有任务单元
    queueList = ["common", "common2"]

    # 调度频率
    dispatch-tick = 2s

    # 如果没有指定的队列,是否自动创建
    auto-create-queue = true
  }

  # 动态创建的任务调用信息
  flexible-task {

    first-dispatch-tick = 5s

    second-dispatch-tick = 10m

  }


}